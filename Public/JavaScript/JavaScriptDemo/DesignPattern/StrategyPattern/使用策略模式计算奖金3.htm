<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>使用策略模式计算奖金3</title>
</head>
<body>
<script type="text/javascript">
	// 策略组：定义一系列算法
	var performancesS = function(){};
	performancesS.prototype.calculate = function(salary){
		return salary * 4;
	};
	var performancesA = function(){};
	performancesA.prototype.calculate = function(salary){
		return salary * 3;
	};
	var performancesB = function(){};
	performancesB.prototype.calculate = function(salary){
		return salary * 3;
	};

	// 环境类Context： 接收客户请求，随后把请求委托给某一个策略类
	var Bonus = function(){
		this.salary = null;		// 原始工资
		this.strategy = null;	// 绩效等级对应的策略对象
	};
	Bonus.prototype.setSalary = function(salary){
		this.salary = salary;	// 设置员工的原始工资
	};
	Bonus.prototype.setStrategy = function(strategy){
		this.strategy = strategy;	// 设置员工绩效等级对应的策略对象
	};
	Bonus.prototype.getBonus = function(){  // 取得奖金数额
		return this.strategy.calculate(this.salary);	// 把计算奖金的操作委托给对应的策略对象
	};

	// 实例化
	var bouns = new Bouns();
	bouns.setSalary(10000);
	bonus.setStrategy(new performancesS()); 	// 设置策略对象
	console.log(bonus.getBonus());
	bonus.setStrategy(new performancesA());		// 设置策略对象
	console.log(bonus.getBonus());
</script>
</body>
</html>