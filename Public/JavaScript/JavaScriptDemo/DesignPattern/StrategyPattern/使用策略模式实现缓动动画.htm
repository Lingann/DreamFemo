<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>使用策略模式实现缓动动画</title>
	<style type="text/css">
		#div2{
			position: absolute;
			background: blue;
		}
		#div{
			position: absolute;
			background: blue;
		}
	</style>
</head>
<body>

<button id="loginBtn">创建一个div</button>
<div style="background: yellow" id="div">我又是一个div</div>
<script type="text/javascript">
	// 逻辑管理 (实现单例的逻辑)
	var getSingle = function (fn) {
		var result;
		return function(){
			return result || (result = fn.apply(this,arguments));
		}
	};

	// 初始化 ()
	var createLoginLayer = function(){
		var div = document.createElement('div');
		div.innerHTML = '我是一个div';
		div.id = 'div2';
		div.style.display = 'none';
		document.body.appendChild(div);
		return div;
	};

	// 初始化逻辑
	var createSingleLoginLayer = getSingle(createLoginLayer);
	

	// 事件
	document.getElementById('loginBtn').onclick = function(){
		var loginLayer = createSingleLoginLayer();
		loginLayer.style.display= 'block';
		var div = document.getElementById('div');
		var animate2 = new Animate(div2);
		animate2.start('left',500,1000,'strongEaseIn');
	};

	</script>






<script type="text/javascript">
	// 策略组 
	var tween = {
		linear: function(t,b,c,d){
			return c * t / d + b;
		},
		easeIn: function(t,b,c,d){
			return c * ( t /= d ) * t +b;
		},
		strongEaseIn: function(t,b,c,d){
			return c * ( t /= d ) * t * t * t * t + b;
		},
		strongEaseOut: function( t,b,c,d ){
			return c * (( t = t / d - 1 ) * t * t * t * t + 1) + b;
		},
		sineaseIn: function(t,b,c,d){
			return c * ( t /= d ) * t * t + b;
		},
		sineaseOut: function(t,b,c,d){
			return c * (( t = t / d - 1) * t * t + 1) + b;
		}
	};

	// Context类
	var Animate = function( dom ){
		this.dom = dom;		// 进行运动的dom节点
		this.startTime = 0;		// 动画开始时间
		this.startPos = 0;		// dom初始位置
		this.endPos = 0;		// don目标位置
		this.propertyName = null;	//dom节点徐涛被改变的css属性名
		this.easing = null;		// 缓动算法
		this.duration = null;	// 动画持续时间
	};

	Animate.prototype.start = function(propertyName,endPos,duration,easing){
		this.startTime = +new Date;		// 动画启动时间
		// dom节点初始位置
		this.startPos = this.dom.getBoundingClientRect()[ propertyName ]; 
		// dom节点需要被改变的css属性名
		this.propertyName = propertyName;
		// dom节点目标位置
		this.endPos = endPos;	
		this.duration =duration;	// 动画持续事件
		this.easing = tween[ easing ];	// 缓动算法

		var self = this;
		// 启动定时器，开始执行动画
		var timeId = setInterval(function(){
			// 如果动画已结束，则清楚定时器
			if (self.step() === false){
				clearInterval(timeId);
			}
		}, 19 );
	};
	Animate.prototype.step = function(){
		var t = +new Date;  // 获取当前时间
		if(t >= this.startTime + this.duration){
			this.update( this.endPos );  // 更新小球的css属性值
			return false;
		}
		// pos为小球当前位置
		var pos = this.easing( t - this.startTime,this.startPos,this.endPos - this.startPos,this.duration );
		this.update (pos);  // 更新小球的css属性值
	};
	Animate.prototype.update = function( pos ){
		this.dom.style[this.propertyName] = pos +'px';
	};

	var animate = new Animate(div);
	animate.start('left',500,1000,'strongEaseIn');
	
</script>

</body>
</html>